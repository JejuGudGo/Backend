spring:
  docker:
    compose:
      enabled: ${DOCKER_COMPOSE_ENABLED}

  main:
    allow-bean-definition-overriding: true

  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_ID}
    password: ${MAIL_PASS}
    properties:
      mail:
        smtp:
          auth: true
          timeout: 5000
          starttls:
            enable: true
        transport:
          protocol: smtp
        debug: true

  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    show-sql: true
    hibernate:
      ddl-auto: update

  kafka:
    bootstrap-servers: ${KAFKA_SERVER}
    consumer:
      group-id: jeju-gudgo
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

  datasource:
    url: jdbc:postgresql://${DATASOURCE_HOST}:${DATASOURCE_PORT}/${DATASOURCE_DB}
    username: ${DATASOURCE_USERNAME}
    password: ${DATASOURCE_PASSWORD}
    driver-class-name: org.postgresql.Driver

  data:
    redis:
      port: ${REDIS_PORT}
      host: ${REDIS_HOST}

  elasticsearch:
    username: ${ELASTIC_USERNAME}
    password: ${ELASTIC_PASS}
    uris: ${ELASTIC_URI}

  springdoc:
    version: v1.0.0
    default-consumes-media-type: application/json;charset=UTF-8

  secret:
    key: ${SECRET_KEY}

  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB

  oauth:
    password: ${OAUTH_PASS}
#  security:
#    oauth2:
#      client:
#        registration:
#          google:
#            redirect-uri: ${GOOGLE_REDIRECT_URL}
#            client-id: ${GOOGLE_CLIENT_ID}
#            client-secret: ${GOOGLE_CLIENT_SECRET}
#            scope:
#              - email
#              - profile
#          kakao:
#            client-id: ${KAKAO_REST_API_KEY}
#            redirect-uri: ${KAKAO_REDIRECT_URL}
#            client-secret: ${KAKAO_SECRET_KEY}
#            client-name: Kakao
#            authorization-grant-type: authorization_code
#            client-authentication-method: client_secret_post
#            scope:
#              - account_email
#              - profile_nickname
#              - profile_image
#        provider:
#          kakao:
#            authorization-uri: https://kauth.kakao.com/oauth/authorize
#            token-uri: https://kauth.kakao.com/oauth/token
#            user-info-uri: https://kapi.kakao.com/v2/user/me
#            user-name-attribute: id

coolsms:
  api:
    key: ${COOLSMS_KEY}
    secret: ${COOLSMS_SECRET_KEY}

sendNumber: ${SEND_NUMBER}

logging:
  level:
    root:
      info

    org:
      springframework:
        security:
          debug

    web:
      debug

tour:
  api:
    key: ${TOUR_API_KEY}

open:
  api:
    key: ${OPEN_API_KEY}

server:
  port: 8080
